package com.womai.shop.manage.front.impl;import java.text.DecimalFormat;import java.util.List;import com.womai.common.tool.util.StringUtils;import com.womai.shop.manage.ServersManager;import com.womai.shop.manage.front.SystemManager;import com.womai.shop.domain.admin.Activity;import com.womai.shop.manage.front.ProductService;import com.womai.shop.domain.front.Product;import com.womai.shop.domain.front.ProductStockInfo;import com.womai.shop.dao.front.ProductDao;public class ProductServiceImpl extends ServersManager<Product> implements		ProductService {	private ProductDao productDao;	public ProductDao getProductDao() {		return productDao;	}	public void setProductDao(ProductDao productDao) {		this.productDao = productDao;	}	@Override	public void upGoods(String[] ids) {		upOrDown(ids, 1);	}	@Override	public void downGoods(String[] ids) {		upOrDown(ids, 2);	}	/**	 * @param ids	 */	private void upOrDown(String[] ids, int status) {		if (ids == null || ids.length == 0) {			return;		}		for (int i = 0; i < ids.length; i++) {			Product goods = new Product();			goods.setId(ids[i]);			goods.setStatus(status);			productDao.update(goods);		}	}	@Override	public List<Product> search(Product e) {		return productDao.selectList(e);	}	@Override	public List<Product> selectParameterList(String id) {		return productDao.selectParameterList(id);	}	@Override	public List<ProductStockInfo> selectStockList(Product product) {		return productDao.selectStockList(product);	}	@Override	public List<Product> selectListProductHTML(Product product) {		return productDao.selectListProductHTML(product);	}	@Override	public List<Product> selectProductListByIds(Product p) {		return productDao.selectProductListByIds(p);	}	@Override	public List<Product> selectHotSearch(Product p) {		return productDao.selectHotSearch(p);	}	@Override	public List<Product> loadHotProductShowInSuperMenu(Product product) {		return productDao.loadHotProductShowInSuperMenu(product);	}	@Override	public void updateHit(Product p) {		productDao.updateHit(p);	}	@Override	public List<Product> selectPageLeftHotProducts(Product p) {		return productDao.selectPageLeftHotProducts(p);	}	@Override	public List<Product> selectActivityProductList(Product p) {		return productDao.selectActivityProductList(p);	}    /**     * 计算活动商品的最终结算价。如果此商品不是活动商品，则直接返回此商品的现价     *     * @return     */    public String caclFinalPrice(Product product) {        ProductStockInfo momeryProduct = SystemManager.productStockMap.get(product.getId());        if (StringUtils.isBlank(momeryProduct.getActivityID())) {//			throw new RuntimeException("此商品不属于活动商品！");            return product.getNowPrice();        }        double finalPrice = 0d;        Activity activity = SystemManager.activityMap.get(momeryProduct.getActivityID());        if (activity.getActivityType().equals(Activity.activity_activityType_c)) {            String discountType = activity.getDiscountType();            if (discountType.equals(Activity.activity_discountType_r)) {                finalPrice = Double.valueOf(product.getNowPrice()) - Double.valueOf(activity.getDiscount());            } else if (discountType.equals(Activity.activity_discountType_d)) {                finalPrice = Double.valueOf(product.getNowPrice()) * Double.valueOf(activity.getDiscount()) / 100d;            } else if (discountType.equals(Activity.activity_discountType_s)) {                //双倍积分的商品价格上不做优惠                finalPrice = Double.valueOf(product.getNowPrice());            }            return df.format(finalPrice);        }        return product.getNowPrice();    }    private static final DecimalFormat df = new DecimalFormat("0.00");}